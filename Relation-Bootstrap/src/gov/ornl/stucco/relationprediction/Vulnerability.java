package gov.ornl.stucco.relationprediction;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;


public class Vulnerability 
{
	//private static File relevanttermsfile = new File("src/main/resources/dictionaries/relevant_terms.txt");
	private static HashSet<String> allknownrelevantterms = null;
	
	
	private String cveid;
	private String msid;
	private String name;
	private ArrayList<String> description;

	private ArrayList<VulnerabilityToSoftwareWVersionRelationship> relationships;
	
	
	private static HashMap<String,Vulnerability> cveidTovulnerability = new HashMap<String,Vulnerability>();
	private static HashMap<String,HashSet<String>> vulnerabilitynameTocveid = new HashMap<String,HashSet<String>>();
	private static HashMap<String,HashSet<String>> vulnerabilitymsTocveid = new HashMap<String,HashSet<String>>();
	
	
	private Vulnerability(String cveid, String msid, String name, ArrayList<String> description)
	{
		this.cveid = cveid;
		this.msid = msid;
		this.name = name;
		this.description = description;
	}
	
	
	public String getCVEID()
	{
		return cveid;
	}
	
	public String getName()
	{
		return name;
	}
	
	public ArrayList<String> getDescription()
	{
		return description;
	}
	
	public String getMSID()
	{
		return msid;
	}
	
	public void addRelationship(VulnerabilityToSoftwareWVersionRelationship relationship)
	{
		if(relationships == null)
			relationships = new ArrayList<VulnerabilityToSoftwareWVersionRelationship>();
		
		relationships.add(relationship);
	}
	
	public ArrayList<VulnerabilityToSoftwareWVersionRelationship> getRelationships()
	{
		return relationships;
	}

	public String getCanonicalName()
	{
		return getCVEID();
	}
	
	
	//If we have already created a Vulnerability with this cveid, we just return it (It will have been entered into the cveidTovulnerability map).  Otherwise, we create it, add it to the map, then return it.
	public static Vulnerability getVulnerabilityFromCVEID(String cveid, String msid, String name, ArrayList<String> description)
	{
		Vulnerability result = getVulnerabilityFromCVEID(cveid);
		if(result == null)
		{
			result = new Vulnerability(cveid, msid, name, description);
			getcveidTovulnerability().put(cveid, result);
		}
		
		if(name != null)
		{
			HashSet<String> cveids = getvulnerabilitynameTocveid().get(name);
			if(cveids == null)
			{
				cveids = new HashSet<String>();
				getvulnerabilitynameTocveid().put(name, cveids);
			}
			cveids.add(cveid);
		}
		
		if(msid != null)
		{
			HashSet<String> cveids = getvulnerabilitymsTocveid().get(msid);
			if(cveids == null)
			{
				cveids = new HashSet<String>();
				getvulnerabilitymsTocveid().put(msid, cveids);
			}
			cveids.add(cveid);
		}
		
		return result;
	}
	
	public static Vulnerability getVulnerabilityFromCVEID(String cveid)
	{
		Vulnerability result = getcveidTovulnerability().get(cveid);
		
		return result;
	}
	
	public static HashMap<String,Vulnerability> getCveIdToVulnerability()
	{
		return getcveidTovulnerability();
	}

	public static ArrayList<Vulnerability> getVulnerabilitiesWithName(String name)
	{
		ArrayList<Vulnerability> result = new ArrayList<Vulnerability>();
		
		HashSet<String> cveids = getvulnerabilitynameTocveid().get(name);
		for(String cveid : cveids)
			result.add(getcveidTovulnerability().get(cveid));
		
		return result;
	}
	
	public static ArrayList<Vulnerability> getVulnerabilitiesWithMSid(String msid)
	{
		ArrayList<Vulnerability> result = new ArrayList<Vulnerability>();
		
		HashSet<String> cveids = getvulnerabilitymsTocveid().get(msid);
		for(String cveid : cveids)
			result.add(getcveidTovulnerability().get(cveid));
		
		return result;
	}

	public static void setAllRelevantTerms()
	{
		if(allknownrelevantterms == null)
		{
			allknownrelevantterms = new HashSet<String>();
		
			try
			{
				//BufferedReader in = new BufferedReader(new FileReader(relevanttermsfile));
				BufferedReader in = new BufferedReader(new FileReader(ProducedFileGetter.getRelevantTermsFile()));
				String line;
				while((line = in.readLine()) != null)
				{
					allknownrelevantterms.add(line.toLowerCase());
				}
				in.close();
			}catch(IOException e)
			{
				System.out.println(e);
				e.printStackTrace();
				System.exit(3);
			}
		}
	}

	public static ArrayList<String> getRelevantDescriptionsFromText(String text)
	{
		HashSet<String> relevanttermsintext = new HashSet<String>();
		
		for(String relevantterm : allknownrelevantterms)
		{
			if(text.contains(relevantterm))
				relevanttermsintext.add(relevantterm);
		}
		
		return new ArrayList<String>(relevanttermsintext);
	}
	
	public static Set<String> getAllRelevantTerms()
	{
		return allknownrelevantterms;
	}
	
	public static Set<String> getAllNames()
	{
		return getvulnerabilitynameTocveid().keySet();
	}
	
	public static Set<String> getAllMSs()
	{
		return getvulnerabilitymsTocveid().keySet();
	}
	
	public static Set<String> getAllCVEs()
	{
		return getcveidTovulnerability().keySet();
	}
	

	private static HashMap<String,Vulnerability> getcveidTovulnerability()
	{
		if(cveidTovulnerability == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
		
		return cveidTovulnerability;
	}
	
	private static HashMap<String,HashSet<String>> getvulnerabilitynameTocveid()
	{
		if(vulnerabilitynameTocveid == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
		
		return vulnerabilitynameTocveid;
	}
	
	private static HashMap<String,HashSet<String>> getvulnerabilitymsTocveid()
	{
		if(vulnerabilitymsTocveid == null)
			GenericCyberEntityTextRelationship.loadAllKnownRelationships();
		
		return vulnerabilitymsTocveid;
	}
	
}
